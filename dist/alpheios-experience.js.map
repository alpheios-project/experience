{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///../node_modules/uuid/lib/rng-browser.js","webpack:///../node_modules/uuid/v4.js","webpack:///./experience.js","webpack:///./index.js","webpack:///./local/storage.js","webpack:///./monitor.js","webpack:///./object-monitor.js","webpack:///./remote/adapter.js","webpack:///./remote/test-adapter.js","webpack:///./transporter.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;ACjCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;AC5BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,iBAAiB,2BAA2B,cAAc;AACzE;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;;AASA;;;;;;;;;;;;;;;ACdA;AAAA;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,kBAAkB,oCAAoC,EAAE,iDAAS;;AAEjE,+BAA+B,mBAAmB;AAClD;AACA;AACA,OAAO;AACP;AACA,sGAAsG,MAAM;AAC5G;AACA;AACA;;AAEA;AACA;AACA,cAAc,UAAU,gBAAgB,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+FAA+F,MAAM;AACrG;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,YAAY,iBAAiB,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,OAAO;AACP,yBAAyB,SAAS,aAAa,YAAY;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,mBAAmB,SAAS,4CAA4C,WAAW;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;;;;;;;;;;;;;;;;ACrJA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;AC9BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA,aAAa,qBAAqB;AAClC,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,mEAAmE,MAAM;AACzE;AACA;AACA;AACA","file":"alpheios-experience.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","/**\r\n * A base object class for an Experience object.\r\n */\r\nexport default class Experience {\r\n  constructor (description) {\r\n    this.description = description\r\n    this.startTime = undefined\r\n    this.endTime = undefined\r\n    this.details = []\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let experience = new Experience(jsonObject.description)\r\n    if (jsonObject.startTime) { experience.startTime = jsonObject.startTime }\r\n    if (jsonObject.endTime) { experience.endTime = jsonObject.endTime }\r\n    for (let detailsItem of jsonObject.details) {\r\n      experience.details.push(Experience.readObject(detailsItem))\r\n    }\r\n    return experience\r\n  }\r\n\r\n  attach (experience) {\r\n    this.details.push(experience)\r\n  }\r\n\r\n  start () {\r\n    this.startTime = new Date().getTime()\r\n    return this\r\n  }\r\n\r\n  complete () {\r\n    this.endTime = new Date().getTime()\r\n    return this\r\n  }\r\n\r\n  get duration () {\r\n    return this.endTime - this.startTime\r\n  }\r\n\r\n  toString () {\r\n    return `\"${this.description}\" experience duration is ${this.duration} ms`\r\n  }\r\n}\r\n","import Experience from './experience'\r\nimport Monitor from './monitor'\r\nimport ObjectMonitor from './object-monitor'\r\nimport Transporter from './transporter'\r\nimport StorageAdapter from './local/storage'\r\nimport TestAdapter from './remote/test-adapter'\r\n\r\nexport {\r\n  Experience,\r\n  Monitor,\r\n  ObjectMonitor,\r\n  Transporter,\r\n  StorageAdapter,\r\n  TestAdapter\r\n}\r\n","/* global browser */\r\n\r\nimport uuidv4 from 'uuid/v4'\r\n\r\n/**\r\n * Represents an adapter for a local storage where experiences are accumulated before a batch of\r\n * experiences is sent to a remote server and is removed from a local storage.\r\n * Currently a `browser.storage.local` local storage is used.\r\n */\r\nexport default class LocalStorageAdapter {\r\n  /**\r\n   * Returns an adapter default values\r\n   * @return {{prefix: string}}\r\n   */\r\n  static get defaults () {\r\n    return {\r\n      // A prefix used to distinguish experience objects from objects of other types\r\n      prefix: 'experience_'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stores a single experience to the local storage.\r\n   * @param {Experience} experience - An experience object to be saved.\r\n   */\r\n  static write (experience) {\r\n    // Keys of experience objects has an `experience_` prefix to distinguish them from objects of other types.\r\n    let uuid = `${LocalStorageAdapter.defaults.prefix}${uuidv4()}`\r\n\r\n    browser.storage.local.set({[uuid]: experience}).then(\r\n      () => {\r\n        console.log(`Experience has been written to the local storage successfully`)\r\n      },\r\n      (error) => {\r\n        console.error(`Cannot write experience to the local storage because of the following error: ${error}`)\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Reads all experiences that are present in a local storage.\r\n   * @return {Promise.<{key: Experience}, Error>} Returns a promise that resolves with an object\r\n   * containing key: value pairs for each experience stored and rejects with an Error object.\r\n   */\r\n  static async readAll () {\r\n    try {\r\n      return await browser.storage.local.get()\r\n    } catch (error) {\r\n      console.error(`Cannot read data from the local storage because of the following error: ${error}`)\r\n      return error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes experience objects with specified keys from a local storage.\r\n   * @param {String[]} keys - an array of keys that specifies what Experience objects need to be removed.\r\n   * @return {Promise.<*|{minArgs, maxArgs}>} A Promise that will be fulfilled with no arguments\r\n   * if the operation succeeded. If the operation failed, the promise will be rejected with an error message.\r\n   */\r\n  static async remove (keys) {\r\n    return browser.storage.local.remove(keys)\r\n  }\r\n}\r\n","import Experience from './experience'\r\nimport Storage from './local/storage'\r\n\r\nexport default class Monitor {\r\n  constructor (monitoringDataList) {\r\n    this.monitored = new Map()\r\n    if (monitoringDataList) {\r\n      for (let monitoringData of monitoringDataList) {\r\n        this.monitored.set(monitoringData.monitoredFunction, monitoringData)\r\n      }\r\n    }\r\n  }\r\n\r\n  static track (object, monitoringDataList) {\r\n    return new Proxy(object, new Monitor(monitoringDataList))\r\n  }\r\n\r\n  get (target, property, receiver) {\r\n    if (this.monitored.has(property)) {\r\n      let monitoringData = this.monitored.get(property)\r\n      if (monitoringData.hasOwnProperty('asyncWrapper')) {\r\n        return Monitor.asyncWrapper.call(this, target, property, monitoringData.asyncWrapper, monitoringData)\r\n      } else {\r\n        console.error(`Only async wrappers are supported by monitor`)\r\n      }\r\n    }\r\n    return target[property]\r\n  }\r\n\r\n  monitor (functionName, functionConfig) {\r\n    this.monitored.set(functionName, functionConfig)\r\n  }\r\n\r\n  static syncWrapper (target, property, experience) {\r\n    console.log(`${property}() sync method has been called`)\r\n    const origMethod = target[property]\r\n    return function (...args) {\r\n      let result = origMethod.apply(this, args)\r\n      console.log(`${property}() sync method has been completed`)\r\n      experience.complete()\r\n      console.log(`${experience}`)\r\n      return result\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A wrapper around asynchronous functions that create new experience. A wrapped function is called\r\n   * as a direct result of a user action: use of UI controls, etc.\r\n   * @param target\r\n   * @param property\r\n   * @param actionFunction\r\n   * @param monitoringData\r\n   * @return {Function}\r\n   */\r\n  static asyncWrapper (target, property, actionFunction, monitoringData) {\r\n    console.log(`${property}() async method has been requested`)\r\n    return async function (...args) {\r\n      try {\r\n        return await actionFunction(this, target, property, args, monitoringData, Storage)\r\n      } catch (error) {\r\n        console.error(`${property}() failed: ${error.value}`)\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A wrapper around asynchronous functions that create new experience. A wrapped function is called\r\n   * as a direct result of a user action: use of UI controls, and such.\r\n   * @param monitor\r\n   * @param target\r\n   * @param property\r\n   * @param args\r\n   * @param monitoringData\r\n   * @param storage\r\n   * @return {Promise.<*>}\r\n   */\r\n  static async recordExperience (monitor, target, property, args, monitoringData, storage) {\r\n    let experience = new Experience(monitoringData.experience)\r\n    console.log(`${property}() async method has been called`)\r\n    // Last item in arguments list is a transaction\r\n    args.push(experience)\r\n    let result = await target[property].apply(monitor, args)\r\n    // resultObject.value is a returned message, experience object is in a `experience` property\r\n    experience = result.state\r\n    experience.complete()\r\n    console.log(`${property}() completed with success, experience is:`, experience)\r\n\r\n    storage.write(experience)\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * A wrapper around functions that are indirect result of user actions. Those functions are usually a part of\r\n   * functions that create user experience.\r\n   * @param monitor\r\n   * @param target\r\n   * @param property\r\n   * @param args\r\n   * @param monitoringData\r\n   * @return {Promise.<*>}\r\n   */\r\n  static async recordExperienceDetails (monitor, target, property, args, monitoringData) {\r\n    let experience = new Experience(monitoringData.experience)\r\n    console.log(`${property}() async method has been called`)\r\n    let resultObject = await target[property].apply(monitor, args)\r\n    experience.complete()\r\n    resultObject.state.attach(experience)\r\n    console.log(`${property}() completed with success, experience is: ${experience}`)\r\n    return resultObject\r\n  }\r\n\r\n  /**\r\n   * This is a wrapper around functions that handle outgoing messages that should have an experience object attached\r\n   * @param monitor\r\n   * @param target\r\n   * @param property\r\n   * @param args\r\n   * @return {Promise.<*>}\r\n   */\r\n  static async attachToMessage (monitor, target, property, args) {\r\n    console.log(`${property}() async method has been called`)\r\n    // First argument is always a request object, last argument is a state (Experience) object\r\n    args[0].experience = args[args.length - 1]\r\n    let result = await target[property].apply(monitor, args)\r\n    console.log(`${property}() completed with success`)\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * This is a wrapper around functions that handle incoming messages with an experience object attached.\r\n   * @param monitor\r\n   * @param target\r\n   * @param property\r\n   * @param args\r\n   * @return {Promise.<*>}\r\n   */\r\n  static async detachFromMessage (monitor, target, property, args) {\r\n    console.log(`${property}() async method has been called`)\r\n    // First argument is an incoming request object\r\n    if (args[0].experience) {\r\n      args.push(Experience.readObject(args[0].experience))\r\n    } else {\r\n      console.warn(`This message has no experience data attached. Experience data will not be recorded`)\r\n    }\r\n    let result = await target[property].apply(monitor, args)\r\n    console.log(`${property}() completed with success`)\r\n    return result\r\n  }\r\n}\r\n","import Experience from './experience'\r\nimport Storage from './local/storage'\r\n\r\nconst experienceActions = {\r\n  START: Symbol('Experience start'),\r\n  STOP: Symbol('Experience stop')\r\n}\r\n\r\nconst eventTypes = {\r\n  CONSTRUCT: Symbol('Construct'),\r\n  GET: Symbol('Get'),\r\n  SET: Symbol('Set')\r\n}\r\n\r\nexport default class ObjectMonitor {\r\n  constructor (options = {}) {\r\n    this.experienceDescription = ''\r\n    for (let event of Object.values(ObjectMonitor.events)) {\r\n      this[event] = []\r\n    }\r\n\r\n    if (options) {\r\n      if (options.experience) { this.experienceDescription = options.experience }\r\n      if (options.actions) {\r\n        for (const action of options.actions) {\r\n          this[action.event].push(action)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static get actions () {\r\n    return experienceActions\r\n  }\r\n\r\n  static get events () {\r\n    return eventTypes\r\n  }\r\n\r\n  static track (object, options) {\r\n    return new Proxy(object, new ObjectMonitor(options))\r\n  }\r\n\r\n  get (target, property) {\r\n    for (let action of this[ObjectMonitor.events.GET]) {\r\n      if (action.name === property) { this.experienceAction(action) }\r\n    }\r\n    return target[property]\r\n  }\r\n\r\n  set (target, property, value) {\r\n    for (let action of this[ObjectMonitor.events.SET]) {\r\n      if (action.name === property) { this.experienceAction(action) }\r\n    }\r\n    target[property] = value\r\n    return true // Success of a set operation\r\n  }\r\n\r\n  experienceAction (action) {\r\n    if (action.action === ObjectMonitor.actions.START) {\r\n      this.experience = new Experience(this.experienceDescription).start()\r\n      console.log(`Experience started`)\r\n    } else if (action.action === ObjectMonitor.actions.STOP) {\r\n      this.experience.complete()\r\n      console.log(`Experience completed:`, this.experience)\r\n      Storage.write(this.experience)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Defines an API for storing experiences on a remote server, such as LRS.\r\n */\r\nexport default class RemoteStorageAdapter {\r\n  /**\r\n   * Stores one or several experiences on a remote server.\r\n   * @param {Experience[]} experiences - An array of experiences to store remotely.\r\n   * @return {Promise} - A promise that is fulfilled when a value is stored on a remote server successfully\r\n   * and is rejected when storing on a remote server failed.\r\n   */\r\n  static write (experiences) {\r\n    console.warn(`This method should be implemented within a subclass and should never be called directly.  \r\n      If you see this message then something is probably goes wrong`)\r\n    return new Promise()\r\n  }\r\n}\r\n","import RemoteStorageAdapter from './adapter'\r\n\r\n/**\r\n * This is a test implementation of a remote experience store adapter. It does not send anything anywhere\r\n * and just records experiences that are passed to it.\r\n */\r\nexport default class TestAdapter extends RemoteStorageAdapter {\r\n  /**\r\n   * Imitates storing of one or several experiences on a remote server.\r\n   * @param {Experience[]} experiences - An array of experiences to store remotely.\r\n   * @return {Promise} - A promise that is fulfilled when a value is stored on a remote server successfully\r\n   * and is rejected when storing on a remote server failed.\r\n   */\r\n  static write (experiences) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!experiences) {\r\n        reject(new Error(`experience cannot be empty`))\r\n        return\r\n      }\r\n      if (!Array.isArray(experiences)) {\r\n        reject(new Error(`experiences must be an array`))\r\n        return\r\n      }\r\n      console.log('Experience sent to a remote server:')\r\n      for (let experience of experiences) {\r\n        console.log(experience)\r\n      }\r\n      resolve()\r\n    })\r\n  }\r\n}\r\n","/**\r\n * Responsible form transporting experiences from one storage to the other. Current implementation\r\n * sends a batch of experience objects to the remote server once a certain amount of them\r\n * is accumulated in a local storage.\r\n */\r\nexport default class Transporter {\r\n  /**\r\n   * Sets a transporter configuration.\r\n   * @param {LocalStorageAdapter} localStorage - Represents local storage where experience objects are\r\n   * accumulated before being sent to a remote server.\r\n   * @param {RemoteStorageAdapter} remoteStorage - Represents a remote server that stores experience objects.\r\n   * @param {number} qtyThreshold - A minimal number of experiences to be sent to a remote storage.\r\n   * @param {number} interval - Interval, in milliseconds, of checking a local storage for changes\r\n   */\r\n  constructor (localStorage, remoteStorage, qtyThreshold, interval) {\r\n    this.localStorage = localStorage\r\n    this.remoteStorage = remoteStorage\r\n    this.qtyThreshold = qtyThreshold\r\n    window.setInterval(this.checkExperienceStorage.bind(this), interval)\r\n  }\r\n\r\n  /**\r\n   * Runs at a specified interval and check if any new experience objects has been recorded to the local storage.\r\n   * If number of experience records exceeds a threshold, sends all experiences to the remote server and\r\n   * removes them from local storage.\r\n   * @return {Promise.<void>}\r\n   */\r\n  async checkExperienceStorage () {\r\n    console.log(`Experience storage check`)\r\n    let records = await this.localStorage.readAll()\r\n    let keys = Object.keys(records).filter((element) => element.indexOf(this.localStorage.defaults.prefix) === 0)\r\n    if (keys.length > this.qtyThreshold) {\r\n      await this.sendExperiencesToRemote()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If there are any experiences in the local storage, sends all of them to a remote server and, if succeeded,\r\n   * removes them from a local storage.\r\n   * @return {Promise.<*>}\r\n   */\r\n  async sendExperiencesToRemote () {\r\n    try {\r\n      let records = await this.localStorage.readAll()\r\n      let values = Object.values(records)\r\n      let keys = Object.keys(records).filter((element) => element.indexOf(this.localStorage.defaults.prefix) === 0)\r\n      if (keys.length > 0) {\r\n        // If there are any records in a local storage\r\n        await this.remoteStorage.write(values)\r\n        await this.localStorage.remove(keys)\r\n      } else {\r\n        console.log(`No data in local experience storage`)\r\n      }\r\n    } catch (error) {\r\n      console.error(`Cannot send experiences to a remote server: ${error}`)\r\n      return error\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}